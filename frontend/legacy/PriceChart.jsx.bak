// backup of original PriceChart.jsx
// ...existing code retained as backup
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  TimeScale
} from 'chart.js';
import 'chartjs-adapter-moment';
import moment from 'moment';

// Register ChartJS components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  TimeScale
);

const PriceChart = ({ symbol = 'BTCUSDT', interval = '1h' }) => {
  const [chartData, setChartData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [signals, setSignals] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // Fetch OHLCV data
        const response = await axios.get(`http://localhost:8000/ohlcv/${symbol}/${interval}`);

        // Fetch signals for this symbol
        const signalsResponse = await axios.get(`http://localhost:8000/signals?symbol=${symbol}&limit=100`);

        const data = response.data;
        const signalsData = signalsResponse.data;

        // Process OHLCV data for chart
        const chartData = {
          labels: data.map(item => moment(item.timestamp).format('YYYY-MM-DD HH:mm')),
          datasets: [
            {
              label: `${symbol} Price`,
              data: data.map(item => item.close),
              borderColor: 'rgb(75, 192, 192)',
              tension: 0.1,
              fill: false
            }
          ]
        };

        setChartData(chartData);
        setSignals(signalsData);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching price data:', error);
        setError('Failed to load price data. Please try again later.');
        setLoading(false);
      }
    };

    fetchData();

  // Set up polling for data updates
  const timer = setInterval(fetchData, 60000); // Update every minute

  return () => clearInterval(timer);
  }, [symbol, interval]);

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      x: {
        type: 'time',
        time: {
          unit: interval.includes('d') ? 'day' : 'hour',
          tooltipFormat: 'YYYY-MM-DD HH:mm',
          displayFormats: {
            hour: 'MMM D, HH:mm',
            day: 'MMM D'
          }
        },
        title: {
          display: true,
          text: 'Date/Time'
        }
      },
      y: {
        title: {
          display: true,
          text: 'Price (USD)'
        }
      }
    },
    plugins: {
      tooltip: {
        mode: 'index',
        intersect: false
      },
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: `${symbol} Price Chart (${interval})`
      }
    }
  };

  if (loading) return <div className="chart-container loading">Loading price data...</div>;
  if (error) return <div className="chart-container error">{error}</div>;
  if (!chartData) return <div className="chart-container">No data available</div>;

  return (
    <div className="chart-container" style={{ height: '400px' }}>
      <Line data={chartData} options={chartOptions} />

      {signals.length > 0 && (
        <div className="signals-overlay">
          <h4>Recent Signals</h4>
          <ul>
            {signals.slice(0, 5).map(signal => {
              // normalize signal name (backend may return `signal` or `signal_type`)
              const rawSig = signal && (signal.signal ?? signal.signal_type ?? signal.signalType ?? signal.type);
              const sig = rawSig ? String(rawSig) : '';
              const cls = `signal-item ${sig ? sig.toLowerCase() : 'unknown'}`.trim();

              // normalize confidence; support several possible field names
              const rawConf = signal && (signal.confidence ?? signal.confidence_score ?? signal.confidencePercent ?? null);
              const confNumber = Number.isFinite(rawConf) ? rawConf : null;

              const confDisplay = confNumber === null ? 'â€”' : `${Math.round(confNumber * 100)}%`;

              return (
                <li key={signal.id} className={cls}>
                  {moment(signal.timestamp).format('YYYY-MM-DD HH:mm')}:
                  <strong>{sig}</strong>
                  (Confidence: {confDisplay})
                </li>
              );
            })}
          </ul>
        </div>
      )}
    </div>
  );
};

export default PriceChart;
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  TimeScale
} from 'chart.js';
import 'chartjs-adapter-moment';
import moment from 'moment';

// Register ChartJS components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  TimeScale
);

const PriceChart = ({ symbol = 'BTCUSDT', interval = '1h' }) => {
  const [chartData, setChartData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [signals, setSignals] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // Fetch OHLCV data
        const response = await axios.get(`http://localhost:8000/ohlcv/${symbol}/${interval}`);

        // Fetch signals for this symbol
        const signalsResponse = await axios.get(`http://localhost:8000/signals?symbol=${symbol}&limit=100`);

        const data = response.data;
        const signalsData = signalsResponse.data;

        // Process OHLCV data for chart
        const chartData = {
          labels: data.map(item => moment(item.timestamp).format('YYYY-MM-DD HH:mm')),
          datasets: [
            {
              label: `${symbol} Price`,
              data: data.map(item => item.close),
              borderColor: 'rgb(75, 192, 192)',
              tension: 0.1,
              fill: false
            }
          ]
        };

        setChartData(chartData);
        setSignals(signalsData);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching price data:', error);
        setError('Failed to load price data. Please try again later.');
        setLoading(false);
      }
    };

    fetchData();

  // Set up polling for data updates
  const timer = setInterval(fetchData, 60000); // Update every minute

  return () => clearInterval(timer);
  }, [symbol, interval]);

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      x: {
        type: 'time',
        time: {
          unit: interval.includes('d') ? 'day' : 'hour',
          tooltipFormat: 'YYYY-MM-DD HH:mm',
          displayFormats: {
            hour: 'MMM D, HH:mm',
            day: 'MMM D'
          }
        },
        title: { display: true, text: 'Date/Time' }
      },
      y: { title: { display: true, text: 'Price (USD)' } }
    },
    plugins: { tooltip: { mode: 'index', intersect: false }, legend: { position: 'top' }, title: { display: true, text: `${symbol} Price Chart (${interval})` } }
  };

  if (loading) return <div className="chart-container loading">Loading price data...</div>;
  if (error) return <div className="chart-container error">{error}</div>;
  if (!chartData) return <div className="chart-container">No data available</div>;

  return (
    <div className="chart-container" style={{ height: '400px' }}>
      <Line data={chartData} options={chartOptions} />
      {signals.length > 0 && (
        <div className="signals-overlay">
          <h4>Recent Signals</h4>
          <ul>
            {signals.slice(0, 5).map(signal => (
              <li key={signal.id} className={`signal-item ${(signal.signal || '').toLowerCase()}`}>
                {moment(signal.timestamp).format('YYYY-MM-DD HH:mm')}: <strong>{signal.signal}</strong> (Confidence: {Math.round((signal.confidence || 0) * 100)}%)
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default PriceChart;
