// backup of original PriceChart.jsx
// ...existing code retained as backup
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  TimeScale
} from 'chart.js';
import 'chartjs-adapter-moment';
import moment from 'moment';

// Register ChartJS components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  TimeScale
);

const PriceChart = ({ symbol = 'BTCUSDT', interval = '1h' }) => {
  const [chartData, setChartData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [signals, setSignals] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // Fetch OHLCV data
        const response = await axios.get(`http://localhost:8000/ohlcv/${symbol}/${interval}`);
        
        // Fetch signals for this symbol
        const signalsResponse = await axios.get(`http://localhost:8000/signals?symbol=${symbol}&limit=100`);
        
        const data = response.data;
        const signalsData = signalsResponse.data;
        
        // Process OHLCV data for chart
        const chartData = {
          labels: data.map(item => moment(item.timestamp).format('YYYY-MM-DD HH:mm')),
          datasets: [
            {
              label: `${symbol} Price`,
              data: data.map(item => item.close),
              borderColor: 'rgb(75, 192, 192)',
              tension: 0.1,
              fill: false
            }
          ]
        };
        
        setChartData(chartData);
        setSignals(signalsData);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching price data:', error);
        setError('Failed to load price data. Please try again later.');
        setLoading(false);
      }
    };

    fetchData();
    
  // Set up polling for data updates
  const timer = setInterval(fetchData, 60000); // Update every minute

  return () => clearInterval(timer);
