import React, { useEffect, useState } from 'react';
import api, { setDefaultExchange } from '../utils/api';

export default function Settings(): JSX.Element {
  const [apiKey, setApiKey] = useState<string>('');
  const [apiSecret, setApiSecret] = useState<string>('');
  const [coinbaseKey, setCoinbaseKey] = useState<string>('');
  const [coinbaseSecret, setCoinbaseSecret] = useState<string>('');
  const [kucoinKey, setKucoinKey] = useState<string>('');
  const [kucoinSecret, setKucoinSecret] = useState<string>('');
  const [defaultExchange, setDefaultExchangeLocal] = useState<string>('binance');
  const [msg, setMsg] = useState<string | null>(null);

  useEffect(() => {
    (async () => {
      try {
        const res = await api.getSettings();
        const settings = (res && (res as any).data) ? (res as any).data : {};
        setApiKey((settings as any).BINANCE_API_KEY || '');
        setApiSecret((settings as any).BINANCE_API_SECRET || '');
        setCoinbaseKey((settings as any).COINBASE_API_KEY || '');
        setCoinbaseSecret((settings as any).COINBASE_API_SECRET || '');
        setKucoinKey((settings as any).KUCOIN_API_KEY || '');
        setKucoinSecret((settings as any).KUCOIN_API_SECRET || '');
        const de = (settings as any).DEFAULT_EXCHANGE || 'binance';
        setDefaultExchangeLocal(de);
        setDefaultExchange(de);
      } catch (err) {
        // ignore errors fetching settings
      }
    })();
  }, []);

  const saveSettings = async () => {
    try {
      const payload: Record<string, unknown> = {
        BINANCE_API_KEY: apiKey,
        BINANCE_API_SECRET: apiSecret,
        COINBASE_API_KEY: coinbaseKey,
        COINBASE_API_SECRET: coinbaseSecret,
        KUCOIN_API_KEY: kucoinKey,
        KUCOIN_API_SECRET: kucoinSecret,
        DEFAULT_EXCHANGE: defaultExchange,
      };
      const resp = await api.saveSettings(payload);
      if ((resp as any).error) {
        setMsg('❌ Failed to save API keys');
      } else {
        setMsg('✅ API keys saved successfully');
        setDefaultExchange((payload.DEFAULT_EXCHANGE as string) || 'binance');
      }
    } catch (err: unknown) {
      const message = (err && typeof err === 'object' && 'message' in err) ? String((err as any).message) : String(err);
      setMsg('⚠️ Error: ' + (message ?? 'Unknown error'));
    }
  };

  return (
    <div className="p-6 dark:bg-gray-900 dark:text-white min-h-screen">
      <h1 className="text-2xl font-bold mb-4">⚙️ Settings</h1>

      <div className="bg-white dark:bg-gray-800 p-6 rounded shadow space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-semibold">Binance API Key</label>
            <input
              type="text"
              value={apiKey}
              onChange={(e) => setApiKey(e.target.value)}
              className="border rounded p-2 w-full text-black"
            />
          </div>

          <div>
            <label className="block text-sm font-semibold">Binance API Secret</label>
            <input
              type="password"
              value={apiSecret}
              onChange={(e) => setApiSecret(e.target.value)}
              className="border rounded p-2 w-full text-black"
            />
          </div>

          <div>
            <label className="block text-sm font-semibold">Coinbase API Key</label>
            <input
              type="text"
              value={coinbaseKey}
              onChange={(e) => setCoinbaseKey(e.target.value)}
              className="border rounded p-2 w-full text-black"
            />
          </div>

          <div>
            <label className="block text-sm font-semibold">Coinbase API Secret</label>
            <input
              type="password"
              value={coinbaseSecret}
              onChange={(e) => setCoinbaseSecret(e.target.value)}
              className="border rounded p-2 w-full text-black"
            />
          </div>

          <div>
            <label className="block text-sm font-semibold">KuCoin API Key</label>
            <input
              type="text"
              value={kucoinKey}
              onChange={(e) => setKucoinKey(e.target.value)}
              className="border rounded p-2 w-full text-black"
            />
          </div>

          <div>
            <label className="block text-sm font-semibold">KuCoin API Secret</label>
            <input
              type="password"
              value={kucoinSecret}
              onChange={(e) => setKucoinSecret(e.target.value)}
              className="border rounded p-2 w-full text-black"
            />
          </div>
        </div>

        <div className="mt-4">
          <label className="block text-sm font-semibold">Default Exchange</label>
          <select value={defaultExchange} onChange={(e) => { setDefaultExchangeLocal(e.target.value); setDefaultExchange(e.target.value); }} className="border rounded p-2 w-full text-black">
            <option value="binance">Binance</option>
            <option value="coinbase">Coinbase</option>
            <option value="kucoin">KuCoin</option>
          </select>
        </div>

        <button onClick={saveSettings} className="px-4 py-2 bg-blue-600 text-white rounded-lg shadow">
          Save
        </button>

        {msg && <p className="mt-2 text-sm">{msg}</p>}
      </div>
    </div>
  );
}
