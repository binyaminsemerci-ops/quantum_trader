name: CI - Quantum Trader

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: quantum
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install pip + deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          # Install linters/test tools; avoid installing sqlalchemy-utils here
          # so we surface it from requirements files and track remediation in issue #14
          pip install ruff mypy black pytest coverage bandit safety

      # --- Linting ---
      - name: Run Ruff
        run: ruff check backend

      - name: Run Mypy
        run: mypy backend

      - name: Run Black
        run: black --check backend

      # --- Security ---
      - name: Run Bandit
        run: bandit -r backend

      - name: Run Safety
        run: safety scan --full-report

      - name: Check for dev-only packages in runtime (FAILS if any found)
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
        run: |
          set -o pipefail
          python backend/scripts/check_dev_deps_in_runtime.py || (
            if [ -f backend/dev_in_runtime.txt ]; then
              pkgs=$(cat backend/dev_in_runtime.txt)
              echo "::error file=backend/dev_in_runtime.txt::Dev-only packages installed in runtime: $pkgs"
              echo "See backend/README.md for remediation: https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/backend/README.md"
            else
              echo "Dev-deps check failed with non-zero exit code"
            fi
            exit 1
          )

      # --- Tests ---
      - name: Run Pytest with Coverage
        env:
          ENV: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: quantum
          POSTGRES_HOST: localhost
        run: |
          coverage run -m pytest backend/tests
          coverage report -m

  annotate-dev-deps:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install runtime requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Run dev-deps check (annotate only)
        id: devcheck
        run: |
          python backend/scripts/check_dev_deps_in_runtime.py || true
          if [ -f backend/dev_in_runtime.txt ]; then
            echo "FOUND=$(cat backend/dev_in_runtime.txt)" >> $GITHUB_OUTPUT
          else
            echo "FOUND=" >> $GITHUB_OUTPUT
          fi
      - name: Create Check Run annotation if offending packages found
        if: steps.devcheck.outputs.FOUND != ''
        uses: actions/github-script@v7
        env:
          FOUND: ${{ steps.devcheck.outputs.FOUND }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const found = process.env.FOUND || ''
            if (!found) return
            const head_sha = context.payload.pull_request && context.payload.pull_request.head && context.payload.pull_request.head.sha
            const pkgs = found.split(',').map(s => s.trim()).filter(Boolean)
            const annotations = pkgs.slice(0,50).map(pkg => ({
              path: 'backend/dev_in_runtime.txt',
              start_line: 1,
              end_line: 1,
              annotation_level: 'warning',
              message: `Dev-only package installed in runtime: ${pkg}`
            }))
            await github.rest.checks.create({
              ...context.repo,
              name: 'dev-deps-check',
              head_sha: head_sha || process.env.GITHUB_SHA,
              status: 'completed',
              conclusion: 'neutral',
              output: {
                title: 'Dev-only packages detected in runtime',
                summary: `Dev-only packages detected: ${found}\n\nPR: https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${context.issue.number || ''}\nRemediation: https://github.com/${context.repo.owner}/${context.repo.repo}/pull/15`,
                annotations,
                details_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/backend/README.md`
              }
            })
